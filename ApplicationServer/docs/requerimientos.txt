Trabajo práctico

JOBIFY

1- 3 COMPONENTES

	1.1 - App Server: 
		Responsable del procesamineto, almacenamineto y delivery de solicitudes de los usuarios.
	1.2 - Shared Server:
		Administración de la información de uso general.
	1.3 . Cliente:
		Respomsable de visualizar los perfiles de los usuarios y permitirá que el usuario pueda armar su red de contactos.


1.1 - APP Server:
	
	Aplicación Linux por consola (?) 
	Debe manetenerse en ejecución por periodos prolongados de tiempo.
	Interfaz -> Restful API

	1.1.1 Servicio de autenticación
		Solicitud que llega con las credenciales del usuario. 
		La respuesta será un token.



	1.1.2 Servicio de busqueda de profesionales
		Busqueda de los profesiones que posee el sistema y ver info asociada.
		Busqueda parametrizable para buscar en cierto rango de distancia.
		Metodos de ordenamiento: 
			más populares por posición,
			más populares por skill.

	1.1.3 Servicio de agregar contacto
		Envio de solicitud de amistad.

	1.1.4 Servicio de recomendación
		Sistema de votación, discriminado por usuario.

	1.1.5 Servicio de consulta de usuarios más populares
		Consultar 10 más populares.
		Popularidad en base a votos.
		Metodos de ordenamiento:
			más populares por posición, 
			más populares por skill.
			(similar 1.1.2)

	1.1.6 Servicio de consulta de perfil
		Información asociada al pedfil.
		Datos:
			- Información personal: 
				nombre
				mail
				fecha de nacimiento
				ciudad
			- Experiencia laboral
			- skills
			- Cantidad de contactos en la red.
			- Foto de perfil

	1.1.7 Almacenamiento de conversaciones (?)
		Persistencia de las conversaciones.

	1.1.8 Log
		Registro de eventos.
		Jerarquización de los eventos:
			1. Error:
				Condicion de falla catastrófica, el sistema no puede funcionar.
				Condicion que no permita ejecutar una funcionalidad.
				Ejemplo: no es posible conectarse con la base de datos.
			2. Warning
				Condicion anomala que no permita el correcto funcionamiento 
				Ejemplo: mal uso de API
			3. Info
				Cualquier accion correspondiente a un caso de uso iniciada por el usuio o el sistea.
				Ejemplo: 
					conexión a la base de datos exitosa
					conexión de nuevo cliente.
			4. Debug
				Informacion de conexto que permita resolver un problema. 
				Ejemplo: Datos de login para la base de datos

	1.1.9 Instalación de la aplicación.
		Generar .deb

	1.1.10 Pruebas sobre API REST mediante python

Requerimientos.
Funcionales
	El sistema debe poder hacer ABM de usuarios.
	El sistema debe poder rankear usuarios por skill.
	El sistema debe poder rankear usuarios por posición.
	El sistema debe poder mostrar usuarios por cercania.
	El sistema debe poder hacer ABM de recomendaciones.
	El sistema debe poder persistir conversaciones entre usuarios.
	El sistema debe poder generar logs.
	El sistema debe poder retribuir información de usuario.

No funcionales
